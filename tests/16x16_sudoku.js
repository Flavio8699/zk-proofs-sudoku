const { assert } = require("chai");
const wasm_tester = require("circom_tester").wasm;

describe("Sudoku 16x16 circuit", function () {
  let sudokuCircuit;

  before(async function () {
    sudokuCircuit = await wasm_tester("./circuits/16x16_sudoku.circom");
  });

  it("Should generate the witness successfully", async function () {
    let input = {
      unsolved: [
        [0, 0, 14, 0, 7, 15, 0, 0, 0, 0, 0, 0, 11, 12, 1, 2],
        [0, 0, 8, 0, 0, 13, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0],
        [0, 6, 5, 0, 0, 16, 2, 11, 13, 0, 0, 0, 0, 8, 3, 4],
        [0, 0, 0, 3, 4, 0, 1, 0, 7, 0, 0, 14, 13, 0, 9, 10],
        [4, 13, 16, 10, 0, 0, 0, 8, 0, 3, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 11, 3, 2, 6, 4, 0, 0, 0, 13, 0, 10, 8, 0],
        [3, 8, 2, 15, 0, 1, 0, 9, 0, 0, 12, 4, 6, 11, 13, 16],
        [0, 14, 0, 0, 11, 12, 16, 13, 0, 0, 8, 1, 0, 0, 4, 15],
        [15, 0, 12, 13, 0, 0, 4, 0, 0, 16, 3, 0, 0, 0, 6, 0],
        [14, 0, 4, 0, 16, 0, 0, 0, 10, 1, 6, 0, 0, 3, 0, 5],
        [0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 7, 5, 14, 4, 15, 0],
        [0, 0, 0, 7, 12, 0, 0, 0, 0, 0, 14, 0, 16, 0, 0, 0],
        [0, 11, 0, 12, 13, 14, 15, 16, 8, 0, 10, 6, 0, 5, 0, 1],
        [8, 0, 0, 16, 0, 5, 11, 0, 9, 0, 0, 0, 4, 6, 14, 0],
        [0, 4, 6, 1, 8, 3, 7, 12, 0, 14, 0, 16, 0, 13, 0, 9],
        [5, 7, 13, 0, 0, 0, 0, 10, 1, 2, 0, 0, 12, 0, 16, 8],
      ],
      solved: [
        [13, 16, 14, 4, 7, 15, 10, 5, 3, 6, 9, 8, 11, 12, 1, 2],
        [7, 1, 8, 2, 9, 13, 12, 3, 16, 11, 4, 10, 15, 14, 5, 6],
        [10, 6, 5, 9, 14, 16, 2, 11, 13, 15, 1, 12, 7, 8, 3, 4],
        [12, 15, 11, 3, 4, 8, 1, 6, 7, 5, 2, 14, 13, 16, 9, 10],
        [4, 13, 16, 10, 15, 7, 14, 8, 6, 3, 5, 11, 1, 9, 2, 12],
        [1, 12, 7, 11, 3, 2, 6, 4, 15, 9, 16, 13, 5, 10, 8, 14],
        [3, 8, 2, 15, 10, 1, 5, 9, 14, 7, 12, 4, 6, 11, 13, 16],
        [6, 14, 9, 5, 11, 12, 16, 13, 2, 10, 8, 1, 3, 7, 4, 15],
        [15, 9, 12, 13, 5, 10, 4, 14, 11, 16, 3, 2, 8, 1, 6, 7],
        [14, 2, 4, 8, 16, 11, 13, 7, 10, 1, 6, 15, 9, 3, 12, 5],
        [16, 3, 10, 6, 1, 9, 8, 2, 12, 13, 7, 5, 14, 4, 15, 11],
        [11, 5, 1, 7, 12, 6, 3, 15, 4, 8, 14, 9, 16, 2, 10, 13],
        [9, 11, 3, 12, 13, 14, 15, 16, 8, 4, 10, 6, 2, 5, 7, 1],
        [8, 10, 15, 16, 2, 5, 11, 1, 9, 12, 13, 7, 4, 6, 14, 3],
        [2, 4, 6, 1, 8, 3, 7, 12, 5, 14, 15, 16, 10, 13, 11, 9],
        [5, 7, 13, 14, 6, 4, 9, 10, 1, 2, 11, 3, 12, 15, 16, 8],
      ],
    };
    const witness = await sudokuCircuit.calculateWitness(input);
    await sudokuCircuit.assertOut(witness, {});
  });
  it("Should fail because there is a number out of bounds", async function () {
    let input = {
      unsolved: [
        [0, 0, 14, 0, 7, 15, 0, 0, 0, 0, 0, 0, 11, 12, 1, 2],
        [0, 0, 8, 0, 0, 13, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0],
        [0, 6, 5, 0, 0, 16, 2, 11, 13, 0, 0, 0, 0, 8, 3, 4],
        [0, 0, 0, 3, 4, 0, 1, 0, 7, 0, 0, 14, 13, 0, 9, 10],
        [4, 13, 16, 10, 0, 0, 0, 8, 0, 3, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 11, 3, 2, 6, 4, 0, 0, 0, 13, 0, 10, 8, 0],
        [3, 8, 2, 15, 0, 1, 0, 9, 0, 0, 12, 4, 6, 11, 13, 16],
        [0, 14, 0, 0, 11, 12, 16, 13, 0, 0, 8, 1, 0, 0, 4, 15],
        [15, 0, 12, 13, 0, 0, 4, 0, 0, 16, 3, 0, 0, 0, 6, 0],
        [14, 0, 4, 0, 16, 0, 0, 0, 10, 1, 6, 0, 0, 3, 0, 5],
        [0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 7, 5, 14, 4, 15, 0],
        [0, 0, 0, 7, 12, 0, 0, 0, 0, 0, 14, 0, 16, 0, 0, 0],
        [0, 11, 0, 12, 13, 14, 15, 16, 8, 0, 10, 6, 0, 5, 0, 1],
        [8, 0, 0, 16, 0, 5, 11, 0, 9, 0, 0, 0, 4, 6, 14, 0],
        [0, 4, 6, 1, 8, 3, 7, 12, 0, 14, 0, 16, 0, 13, 0, 9],
        [5, 7, 13, 0, 0, 0, 0, 10, 1, 2, 0, 0, 12, 0, 16, 8],
      ],
      solved: [
        [13, 16, 14, 4, 7, 15, 10, 5, 3, 6, 9, 8, 11, 12, 1, 17],
        [7, 1, 8, 2, 9, 13, 12, 3, 16, 11, 4, 10, 15, 14, 5, 6],
        [10, 6, 5, 9, 14, 16, 2, 11, 13, 15, 1, 12, 7, 8, 3, 4],
        [12, 15, 11, 3, 4, 8, 1, 6, 7, 5, 2, 14, 13, 16, 9, 10],
        [4, 13, 16, 10, 15, 7, 14, 8, 6, 3, 5, 11, 1, 9, 2, 12],
        [1, 12, 7, 11, 3, 2, 6, 4, 15, 9, 16, 13, 5, 10, 8, 14],
        [3, 8, 2, 15, 10, 1, 5, 9, 14, 7, 12, 4, 6, 11, 13, 16],
        [6, 14, 9, 5, 11, 12, 16, 13, 2, 10, 8, 1, 3, 7, 4, 15],
        [15, 9, 12, 13, 5, 10, 4, 14, 11, 16, 3, 2, 8, 1, 6, 7],
        [14, 2, 4, 8, 16, 11, 13, 7, 10, 1, 6, 15, 9, 3, 12, 5],
        [16, 3, 10, 6, 1, 9, 8, 2, 12, 13, 7, 5, 14, 4, 15, 11],
        [11, 5, 1, 7, 12, 6, 3, 15, 4, 8, 14, 9, 16, 2, 10, 13],
        [9, 11, 3, 12, 13, 14, 15, 16, 8, 4, 10, 6, 2, 5, 7, 1],
        [8, 10, 15, 16, 2, 5, 11, 1, 9, 12, 13, 7, 4, 6, 14, 3],
        [2, 4, 6, 1, 8, 3, 7, 12, 5, 14, 15, 16, 10, 13, 11, 9],
        [5, 7, 13, 14, 6, 4, 9, 10, 1, 2, 11, 3, 12, 15, 16, 8],
      ],
    };
    try {
      await sudokuCircuit.calculateWitness(input);
    } catch (err) {
      // console.log(err);
      assert(err.message.includes("Assert Failed"));
    }
  });
  it("Should fail because unsolved is not the initial state of solved", async function () {
    // unsolved is not the initial state of solved
    let input = {
      unsolved: [
        [3, 12, 4, 16, 0, 10, 15, 9, 1, 0, 0, 14, 13, 11, 0, 0],
        [0, 0, 0, 15, 1, 0, 11, 0, 0, 0, 5, 13, 12, 14, 0, 0],
        [8, 0, 13, 0, 0, 0, 0, 5, 15, 0, 6, 12, 9, 0, 0, 2],
        [0, 0, 5, 0, 0, 0, 13, 14, 0, 0, 0, 11, 0, 0, 3, 0],
        [13, 8, 11, 0, 16, 3, 0, 0, 6, 5, 0, 9, 0, 0, 2, 15],
        [1, 0, 12, 0, 9, 11, 0, 6, 0, 15, 4, 16, 5, 0, 0, 13],
        [7, 0, 0, 0, 0, 14, 0, 0, 11, 0, 0, 2, 4, 6, 0, 0],
        [0, 6, 0, 10, 0, 12, 8, 0, 7, 14, 13, 1, 0, 0, 0, 16],
        [0, 7, 8, 0, 0, 0, 6, 3, 13, 0, 15, 5, 0, 12, 0, 0],
        [0, 15, 1, 11, 0, 5, 16, 8, 0, 12, 9, 0, 6, 13, 4, 7],
        [0, 3, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 0, 9, 11],
        [9, 0, 0, 0, 0, 0, 0, 0, 4, 0, 16, 0, 2, 8, 0, 0],
        [0, 4, 7, 0, 0, 0, 0, 0, 0, 0, 14, 15, 0, 2, 0, 12],
        [14, 0, 0, 6, 0, 16, 9, 1, 12, 7, 2, 0, 11, 0, 13, 0],
        [0, 2, 0, 8, 0, 0, 12, 0, 5, 13, 1, 10, 0, 0, 0, 9],
        [12, 13, 0, 0, 7, 8, 0, 2, 0, 0, 11, 4, 0, 15, 0, 0],
      ],
      solved: [
        [13, 16, 14, 4, 7, 15, 10, 5, 3, 6, 9, 8, 11, 12, 1, 2],
        [7, 1, 8, 2, 9, 13, 12, 3, 16, 11, 4, 10, 15, 14, 5, 6],
        [10, 6, 5, 9, 14, 16, 2, 11, 13, 15, 1, 12, 7, 8, 3, 4],
        [12, 15, 11, 3, 4, 8, 1, 6, 7, 5, 2, 14, 13, 16, 9, 10],
        [4, 13, 16, 10, 15, 7, 14, 8, 6, 3, 5, 11, 1, 9, 2, 12],
        [1, 12, 7, 11, 3, 2, 6, 4, 15, 9, 16, 13, 5, 10, 8, 14],
        [3, 8, 2, 15, 10, 1, 5, 9, 14, 7, 12, 4, 6, 11, 13, 16],
        [6, 14, 9, 5, 11, 12, 16, 13, 2, 10, 8, 1, 3, 7, 4, 15],
        [15, 9, 12, 13, 5, 10, 4, 14, 11, 16, 3, 2, 8, 1, 6, 7],
        [14, 2, 4, 8, 16, 11, 13, 7, 10, 1, 6, 15, 9, 3, 12, 5],
        [16, 3, 10, 6, 1, 9, 8, 2, 12, 13, 7, 5, 14, 4, 15, 11],
        [11, 5, 1, 7, 12, 6, 3, 15, 4, 8, 14, 9, 16, 2, 10, 13],
        [9, 11, 3, 12, 13, 14, 15, 16, 8, 4, 10, 6, 2, 5, 7, 1],
        [8, 10, 15, 16, 2, 5, 11, 1, 9, 12, 13, 7, 4, 6, 14, 3],
        [2, 4, 6, 1, 8, 3, 7, 12, 5, 14, 15, 16, 10, 13, 11, 9],
        [5, 7, 13, 14, 6, 4, 9, 10, 1, 2, 11, 3, 12, 15, 16, 8],
      ],
    };
    try {
      await sudokuCircuit.calculateWitness(input);
    } catch (err) {
      // console.log(err);
      assert(err.message.includes("Assert Failed"));
    }
  });
  it("Should fail due to repeated numbers in a row", async function () {
    // The number 1 in the first row of solved is twice
    let input = {
      unsolved: [
        [0, 0, 14, 0, 7, 15, 0, 0, 0, 0, 0, 0, 11, 12, 1, 2],
        [0, 0, 8, 0, 0, 13, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0],
        [0, 6, 5, 0, 0, 16, 2, 11, 13, 0, 0, 0, 0, 8, 3, 4],
        [0, 0, 0, 3, 4, 0, 1, 0, 7, 0, 0, 14, 13, 0, 9, 10],
        [4, 13, 16, 10, 0, 0, 0, 8, 0, 3, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 11, 3, 2, 6, 4, 0, 0, 0, 13, 0, 10, 8, 0],
        [3, 8, 2, 15, 0, 1, 0, 9, 0, 0, 12, 4, 6, 11, 13, 16],
        [0, 14, 0, 0, 11, 12, 16, 13, 0, 0, 8, 1, 0, 0, 4, 15],
        [15, 0, 12, 13, 0, 0, 4, 0, 0, 16, 3, 0, 0, 0, 6, 0],
        [14, 0, 4, 0, 16, 0, 0, 0, 10, 1, 6, 0, 0, 3, 0, 5],
        [0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 7, 5, 14, 4, 15, 0],
        [0, 0, 0, 7, 12, 0, 0, 0, 0, 0, 14, 0, 16, 0, 0, 0],
        [0, 11, 0, 12, 13, 14, 15, 16, 8, 0, 10, 6, 0, 5, 0, 1],
        [8, 0, 0, 16, 0, 5, 11, 0, 9, 0, 0, 0, 4, 6, 14, 0],
        [0, 4, 6, 1, 8, 3, 7, 12, 0, 14, 0, 16, 0, 13, 0, 9],
        [5, 7, 13, 0, 0, 0, 0, 10, 1, 2, 0, 0, 12, 0, 16, 8],
      ],
      solved: [
        [13, 13, 14, 4, 7, 15, 10, 5, 3, 6, 9, 8, 11, 12, 1, 2],
        [7, 1, 8, 2, 9, 13, 12, 3, 16, 11, 4, 10, 15, 14, 5, 6],
        [10, 6, 5, 9, 14, 16, 2, 11, 13, 15, 1, 12, 7, 8, 3, 4],
        [12, 15, 11, 3, 4, 8, 1, 6, 7, 5, 2, 14, 13, 16, 9, 10],
        [4, 13, 16, 10, 15, 7, 14, 8, 6, 3, 5, 11, 1, 9, 2, 12],
        [1, 12, 7, 11, 3, 2, 6, 4, 15, 9, 16, 13, 5, 10, 8, 14],
        [3, 8, 2, 15, 10, 1, 5, 9, 14, 7, 12, 4, 6, 11, 13, 16],
        [6, 14, 9, 5, 11, 12, 16, 13, 2, 10, 8, 1, 3, 7, 4, 15],
        [15, 9, 12, 13, 5, 10, 4, 14, 11, 16, 3, 2, 8, 1, 6, 7],
        [14, 2, 4, 8, 16, 11, 13, 7, 10, 1, 6, 15, 9, 3, 12, 5],
        [16, 3, 10, 6, 1, 9, 8, 2, 12, 13, 7, 5, 14, 4, 15, 11],
        [11, 5, 1, 7, 12, 6, 3, 15, 4, 8, 14, 9, 16, 2, 10, 13],
        [9, 11, 3, 12, 13, 14, 15, 16, 8, 4, 10, 6, 2, 5, 7, 1],
        [8, 10, 15, 16, 2, 5, 11, 1, 9, 12, 13, 7, 4, 6, 14, 3],
        [2, 4, 6, 1, 8, 3, 7, 12, 5, 14, 15, 16, 10, 13, 11, 9],
        [5, 7, 13, 14, 6, 4, 9, 10, 1, 2, 11, 3, 12, 15, 16, 8],
      ],
    };
    try {
      await sudokuCircuit.calculateWitness(input);
    } catch (err) {
      // console.log(err);
      assert(err.message.includes("Assert Failed"));
    }
  });
  it("Should fail due to repeated numbers in a column", async function () {
    // The number 4 in the first column of solved is twice and the number 7 in the last column of solved is twice too
    let input = {
      unsolved: [
        [0, 0, 14, 0, 7, 15, 0, 0, 0, 0, 0, 0, 11, 12, 1, 2],
        [0, 0, 8, 0, 0, 13, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0],
        [0, 6, 5, 0, 0, 16, 2, 11, 13, 0, 0, 0, 0, 8, 3, 4],
        [0, 0, 0, 3, 4, 0, 1, 0, 7, 0, 0, 14, 13, 0, 9, 10],
        [4, 13, 16, 10, 0, 0, 0, 8, 0, 3, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 11, 3, 2, 6, 4, 0, 0, 0, 13, 0, 10, 8, 0],
        [3, 8, 2, 15, 0, 1, 0, 9, 0, 0, 12, 4, 6, 11, 13, 16],
        [0, 14, 0, 0, 11, 12, 16, 13, 0, 0, 8, 1, 0, 0, 4, 15],
        [15, 0, 12, 13, 0, 0, 4, 0, 0, 16, 3, 0, 0, 0, 6, 0],
        [14, 0, 4, 0, 16, 0, 0, 0, 10, 1, 6, 0, 0, 3, 0, 5],
        [0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 7, 5, 14, 4, 15, 0],
        [0, 0, 0, 7, 12, 0, 0, 0, 0, 0, 14, 0, 16, 0, 0, 0],
        [0, 11, 0, 12, 13, 14, 15, 16, 8, 0, 10, 6, 0, 5, 0, 1],
        [8, 0, 0, 16, 0, 5, 11, 0, 9, 0, 0, 0, 4, 6, 14, 0],
        [0, 4, 6, 1, 8, 3, 7, 12, 0, 14, 0, 16, 0, 13, 0, 9],
        [5, 7, 13, 0, 0, 0, 0, 10, 1, 2, 0, 0, 12, 0, 16, 8],
      ],
      solved: [
        [13, 16, 14, 4, 7, 15, 10, 5, 3, 6, 9, 8, 11, 12, 1, 2],
        [13, 1, 8, 2, 9, 13, 12, 3, 16, 11, 4, 10, 15, 14, 5, 6],
        [10, 6, 5, 9, 14, 16, 2, 11, 13, 15, 1, 12, 7, 8, 3, 4],
        [12, 15, 11, 3, 4, 8, 1, 6, 7, 5, 2, 14, 13, 16, 9, 10],
        [4, 13, 16, 10, 15, 7, 14, 8, 6, 3, 5, 11, 1, 9, 2, 12],
        [1, 12, 7, 11, 3, 2, 6, 4, 15, 9, 16, 13, 5, 10, 8, 14],
        [3, 8, 2, 15, 10, 1, 5, 9, 14, 7, 12, 4, 6, 11, 13, 16],
        [6, 14, 9, 5, 11, 12, 16, 13, 2, 10, 8, 1, 3, 7, 4, 15],
        [15, 9, 12, 13, 5, 10, 4, 14, 11, 16, 3, 2, 8, 1, 6, 7],
        [14, 2, 4, 8, 16, 11, 13, 7, 10, 1, 6, 15, 9, 3, 12, 5],
        [16, 3, 10, 6, 1, 9, 8, 2, 12, 13, 7, 5, 14, 4, 15, 11],
        [11, 5, 1, 7, 12, 6, 3, 15, 4, 8, 14, 9, 16, 2, 10, 13],
        [9, 11, 3, 12, 13, 14, 15, 16, 8, 4, 10, 6, 2, 5, 7, 1],
        [8, 10, 15, 16, 2, 5, 11, 1, 9, 12, 13, 7, 4, 6, 14, 3],
        [2, 4, 6, 1, 8, 3, 7, 12, 5, 14, 15, 16, 10, 13, 11, 9],
        [5, 7, 13, 14, 6, 4, 9, 10, 1, 2, 11, 3, 12, 15, 16, 8],
      ],
    };
    try {
      await sudokuCircuit.calculateWitness(input);
    } catch (err) {
      // console.log(err);
      assert(err.message.includes("Assert Failed"));
    }
  });
  it("Should fail due to repeated numbers in a square", async function () {
    // The number 1 in the first square (top-left) of solved is twice
    let input = {
      unsolved: [
        [0, 0, 14, 0, 7, 15, 0, 0, 0, 0, 0, 0, 11, 12, 1, 2],
        [0, 0, 8, 0, 0, 13, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0],
        [0, 6, 5, 0, 0, 16, 2, 11, 13, 0, 0, 0, 0, 8, 3, 4],
        [0, 0, 0, 3, 4, 0, 1, 0, 7, 0, 0, 14, 13, 0, 9, 10],
        [4, 13, 16, 10, 0, 0, 0, 8, 0, 3, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 11, 3, 2, 6, 4, 0, 0, 0, 13, 0, 10, 8, 0],
        [3, 8, 2, 15, 0, 1, 0, 9, 0, 0, 12, 4, 6, 11, 13, 16],
        [0, 14, 0, 0, 11, 12, 16, 13, 0, 0, 8, 1, 0, 0, 4, 15],
        [15, 0, 12, 13, 0, 0, 4, 0, 0, 16, 3, 0, 0, 0, 6, 0],
        [14, 0, 4, 0, 16, 0, 0, 0, 10, 1, 6, 0, 0, 3, 0, 5],
        [0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 7, 5, 14, 4, 15, 0],
        [0, 0, 0, 7, 12, 0, 0, 0, 0, 0, 14, 0, 16, 0, 0, 0],
        [0, 11, 0, 12, 13, 14, 15, 16, 8, 0, 10, 6, 0, 5, 0, 1],
        [8, 0, 0, 16, 0, 5, 11, 0, 9, 0, 0, 0, 4, 6, 14, 0],
        [0, 4, 6, 1, 8, 3, 7, 12, 0, 14, 0, 16, 0, 13, 0, 9],
        [5, 7, 13, 0, 0, 0, 0, 10, 1, 2, 0, 0, 12, 0, 16, 8],
      ],
      solved: [
        [13, 16, 14, 4, 7, 15, 10, 5, 3, 6, 9, 8, 11, 12, 1, 2],
        [7, 13, 8, 2, 9, 13, 12, 3, 16, 11, 4, 10, 15, 14, 5, 6],
        [10, 6, 5, 9, 14, 16, 2, 11, 13, 15, 1, 12, 7, 8, 3, 4],
        [12, 15, 11, 3, 4, 8, 1, 6, 7, 5, 2, 14, 13, 16, 9, 10],
        [4, 13, 16, 10, 15, 7, 14, 8, 6, 3, 5, 11, 1, 9, 2, 12],
        [1, 12, 7, 11, 3, 2, 6, 4, 15, 9, 16, 13, 5, 10, 8, 14],
        [3, 8, 2, 15, 10, 1, 5, 9, 14, 7, 12, 4, 6, 11, 13, 16],
        [6, 14, 9, 5, 11, 12, 16, 13, 2, 10, 8, 1, 3, 7, 4, 15],
        [15, 9, 12, 13, 5, 10, 4, 14, 11, 16, 3, 2, 8, 1, 6, 7],
        [14, 2, 4, 8, 16, 11, 13, 7, 10, 1, 6, 15, 9, 3, 12, 5],
        [16, 3, 10, 6, 1, 9, 8, 2, 12, 13, 7, 5, 14, 4, 15, 11],
        [11, 5, 1, 7, 12, 6, 3, 15, 4, 8, 14, 9, 16, 2, 10, 13],
        [9, 11, 3, 12, 13, 14, 15, 16, 8, 4, 10, 6, 2, 5, 7, 1],
        [8, 10, 15, 16, 2, 5, 11, 1, 9, 12, 13, 7, 4, 6, 14, 3],
        [2, 4, 6, 1, 8, 3, 7, 12, 5, 14, 15, 16, 10, 13, 11, 9],
        [5, 7, 13, 14, 6, 4, 9, 10, 1, 2, 11, 3, 12, 15, 16, 8],
      ],
    };
    try {
      await sudokuCircuit.calculateWitness(input);
    } catch (err) {
      // console.log(err);
      assert(err.message.includes("Assert Failed"));
    }
  });
});
